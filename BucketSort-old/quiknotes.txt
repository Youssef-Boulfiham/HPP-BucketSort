#include <iostream>
#include <vector>
#include <chrono>

int main() {
    std::vector<int> numbers;
    numbers.push_back(42);
    numbers.push_back(24);

    auto start = std::chrono::high_resolution_clock::now();

    for (const auto& number : numbers) {
        std::cout << number << std::endl;
    }

    auto end = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);

    std::cout << "Computation time: " << duration.count() << " microseconds" << std::endl;

    return 0;
}


//TODO: voorbeeld lambda
std::function<int(int)> countDigits = [](int value) { return floor(log10(value)) + 1; };

//    std::cout << printList(twoDigits) << "." << std::endl;
//    std::vector<std::vector<int>> buckets = {{},
//                                             {},
//                                             {},
//                                             {},
//                                             {},
//                                             {},
//                                             {},
//                                             {},
//                                             {},
//                                             {}};
//    std::cout << printListOfLists(buckets) << std::endl;
//
//    std::cout << "sort" << std::endl;
//    for (const auto &element: twoDigits) {
//        TODO: hier gebleven
//        std::cout << countDigits(element) << std::endl;

//        int index = element;
//        if (index >= 10) {
//            index = element % 10;
//        }
//        buckets[index].push_back(element);
//    }
//    std::cout << printListOfLists(buckets) << std::endl;

//    std::cout << "flatten" << std::endl;
//    std::vector<int> sortedList = flattenListOfLists(buckets);
//    std::cout << printList(sortedList) << std::endl;



    std::string task = "sorteer positieve eenheden";
    std::vector<int> digitOnePositive = {5, 6, 9, 6, 1, 8, 2, 0, 5, 6};
    std::string task1 = "sorteer positieve tientallen";
    std::vector<int> digitTwoPositive = {31, 59, 5, 71, 60, 63, 60, 71, 40, 69};
    std::string task2 = "sorteer positieve honderdtallen";
    std::vector<int> digitThreePositive = {233, 338, 176, 54, 87, 471, 24, 122, 538, 684};
    std::string task3 = "sorteer negatieve eenheden";
    std::vector<int> digitOneNegative = {-10, 0, -9, -2, -5, -10, 0, -1, -5, -9};
    std::string task4 = "sorteer negatieve tientallen";
    std::vector<int> digitTwoNegative = {-61, -39, -100, -46, -68, -13, -68, -13, -61, -96};
    std::string task5 = "sorteer negatieve honderdtallen";
    std::vector<int> digitThreeNegative = {-510, -356, -831, -797, -873, -205, -520, -999, -246, -494};
    std::string task6 = "sorteer positieve en negatieve eenheden";
    std::vector<int> digitOneAny = {6, -5, 2, -4, -1, -1, 9, -10, 6, -2};
    std::string task7 = "sorteer positieve en negatieve tientallen";
    std::vector<int> digitTwoAny = {66, 99, 54, -97, -2, 81, 32, 61, 78, 96};
    std::string task8 = "sorteer positieve en negatieve hondertallen";
    std::vector<int> digitThreeAny = {720, -485, -291, 52, -89, -134, -206, 165, 887, -755};

    std::vector<std::vector<int>> testcases = {digitOnePositive,
                                               digitTwoPositive,
                                               digitThreePositive
    };
    std::vector<std::string> testcasesNames = {task,
                                               task1,
                                               task2};

std::string printListOfLists(const std::vector<std::vector<int>> &listOfLists) {
    std::ostringstream os;
    if (listOfLists.size() == 1 && listOfLists[0].empty()) {
        os << "{{}}";
    } else {
        os << "{";
        for (const auto &list: listOfLists) {
            if (list.empty()) {
                os << "{}";
            } else {
                os << "{";
                for (int i = 0; i < list.size(); i++) {
                    os << list[i];
                    if (i != list.size() - 1) {
                        os << ",";
                    }
                }
                os << "}";
            }
        }
        os << "}";
    }
    return os.str();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////

#include "include/BucketSort.h"

#include <iostream>
#include <vector>
#include <sstream>
#include <iterator>
#include <cmath>
#include <functional>

BucketSort::BucketSort(std::string taskName) : Server("inherit") {
    this->taskName = taskName;
    this->digitsTypes = {"eenheden", "tientallen", "honderdtallen"};
}

std::vector<int> BucketSort::gatheringPass(std::vector<std::vector<int>>) {

}

void BucketSort::setDigitsCount(std::vector<int> listOfInts) {
    std::vector<int> counts = {};
    int countMax = 0;
    for (int i = 0; i < listOfInts.size(); i++) {
        int int_ = listOfInts[i];
        int countTemp;
        if (listOfInts[i] < 0) {
            int_ = abs(listOfInts[i]);
        }
        if (int_ == 0) {
            countTemp = 0;
        } else {
            countTemp = log10(int_);
        }
        counts.push_back(countTemp);

        if (countTemp > countMax) {
            countMax = countTemp;
        }
    }
    this->digitsIndexes = counts;
    this->digitsCountsMax = countMax;
    this->digitsType = this->digitsTypes[countMax];
}


std::ostream &operator<<(std::ostream &os, BucketSort &BucketSort) {
    os <<
       BucketSort.printList(BucketSort.listUnsorted)
       << ", " << BucketSort.printList(BucketSort.digitsIndexes)
       << ", " << BucketSort.digitsTypes[BucketSort.digitsCountsMax - 1]
       << ", " << BucketSort.printList(BucketSort.listSorted)
       << std::endl;
    return os;
}

void BucketSort::distributionPass(std::vector<int> listUnsorted) {
    std::vector<std::vector<int>> listOfIntsPositive = this->buckets;
    std::vector<std::vector<int>> listOfIntsNegative = this->buckets;
    for (int i = 0; i < this->listUnsorted.size(); i++) {
        std::cout << i << ", " << listUnsorted[i] << ", ";

        if ((this->digitsCountsMax == this->digitsIndexes[i]) && (this->listUnsorted[i] >= 0)) {
            listOfIntsPositive[intToString(listUnsorted[i])[this->digitsIndexes[i]]].push_back(1);
//            listOfIntsPositive[this->intToString(this->listUnsorted[i])[this->digitsCountsMax]].push_back(listUnsorted[i]);
//            std::cout << listOfIntsPositive[intToString(listUnsorted[i])[this->digitsIndexes[i]]].push_back(1) << ", " ;
            std::cout << printListOfLists(listOfIntsPositive) << std::endl;
        }
    }
}

void BucketSort::run(std::vector<int> listUnsorted) {
    this->listUnsorted = listUnsorted;
    setDigitsCount(listUnsorted);
    distributionPass(listUnsorted);
    int a = 0;
}

/////////////////////////////
#include "include/BucketSort.h"

#include <iostream>
#include <vector>
#include <sstream>
#include <iterator>
#include <cmath>
#include <functional>

BucketSort::BucketSort(std::string taskName) : Server("inherit") {
    this->taskName = taskName;
}

std::ostream &operator<<(std::ostream &os, BucketSort &BucketSort) {
    os;
    return os;
}

void BucketSort::distributionPass() {
    for (int i = 0; i < listUnsorted.size(); i++) {
        int digit = listUnsorted[i] % 10;
        buckets[digit].push_back(listUnsorted[i]);
    }
}

std::vector<int> BucketSort::gatheringPass() {
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < buckets[i].size(); j++) {
            listSorted.push_back(buckets[i][j]);
        }
    }
}

void BucketSort::run(std::vector<int> listUnsorted) {
    this->listUnsorted = listUnsorted;
    distributionPass();
//    gatheringPass();
    int a = 0;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "include/BucketSort.h"

#include <iostream>
#include <vector>
#include <sstream>
#include <iterator>
#include <cmath>
#include <functional>

BucketSort::BucketSort(std::string taskName) : Server("inherit") {
    this->taskName = taskName;
}

std::ostream &operator<<(std::ostream &os, BucketSort &BucketSort) {
    os << BucketSort.printList(BucketSort.listUnsorted)
       << ", " << BucketSort.printList(BucketSort.listSorted)
       << std::endl;
    return os;
}

void BucketSort::distributionPass(std::vector<int> &inputList, int place) {
    std::vector<std::vector<int>> positiveTemp(10);
    std::vector<std::vector<int>> negativeTemp(10);
    for (int i = 0; i < inputList.size(); i++) {
        int digit = (inputList[i] / place) % 10;
        if (digit < 0) {
            digit *= -1;
            negativeTemp[digit].push_back(inputList[i]);
        } else {
            positiveTemp[digit].push_back(inputList[i]);
        }
    }
    inputList.clear();
    for (int i = 9; i >= 0; i--) {
        for (int j = 0; j < negativeTemp[i].size(); j++) {
            inputList.push_back(negativeTemp[i][j]);
        }
    }
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < positiveTemp[i].size(); j++) {
            inputList.push_back(positiveTemp[i][j]);
        }
    }
}


void BucketSort::gatheringPass(std::vector<int> &inputList, int max) {
    int place = 1;
    int numOfDigits = std::ceil(std::log10(max + 1));
    for (int i = 0; i < numOfDigits; i++) {
        distributionPass(inputList, place);
        place *= 10;
    }
}

void BucketSort::run(std::vector<int> inputList) {
    this->listUnsorted = inputList;
    int max = *std::max_element(inputList.begin(), inputList.end());
    gatheringPass(inputList, max);
    this->listSorted = inputList;
}


//    for (int i = 0; i < inputList.size(); i++) {
//        int value = inputList[i];
//        std::cout
//                << "digitsIndex=" << digitsIndex
//                << ", " << "index1=" << i
//                << ", " << "value=" << value;
//        // TODO: pos/neg opdelen
//        if (value >= 0) {
//            std::string valueString = intToString(value);
//            std::cout
//                    << ", " << "string=" << valueString;
//            if (valueString.size() - 1 == digitsIndex) {
//                int bucketsIndex = stringToInt(valueString[digitsIndex]);
//                std::cout
//                        << ", " << "bucketsIndex=" << bucketsIndex;
//
//            } else if (valueString.size() == digitsIndex) {
//                int bucketsIndex = 0;
//                std::cout
//                        << ", " << "bucketsIndex=" << bucketsIndex;
//            }
//        }
//        std::cout << std::endl;
//    }


            if (digitsCount == valueString.size() - 1 >= digitsIndex) {
                bucketsPositive[this->stringToInt(valueString[digitsIndex])].push_back(value);
            }
            if (valueString.size() < digitsCount) {
                bucketsPositive[0].push_back(value);
            }